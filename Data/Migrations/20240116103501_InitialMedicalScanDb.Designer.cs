// <auto-generated />
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240116103501_InitialMedicalScanDb")]
    partial class InitialMedicalScanDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dr. Gipsz Jakab"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dr. Teszt Elek"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dr. Kedvező Áron"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dr. Gipsz Elek"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dr. Doktor Doloróza"
                        });
                });

            modelBuilder.Entity("Data.Models.DoctorSpecialty", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("DoctorSpecialties");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            SpecialtyId = 1
                        },
                        new
                        {
                            DoctorId = 1,
                            SpecialtyId = 2
                        },
                        new
                        {
                            DoctorId = 2,
                            SpecialtyId = 5
                        },
                        new
                        {
                            DoctorId = 3,
                            SpecialtyId = 2
                        },
                        new
                        {
                            DoctorId = 3,
                            SpecialtyId = 4
                        },
                        new
                        {
                            DoctorId = 4,
                            SpecialtyId = 3
                        },
                        new
                        {
                            DoctorId = 5,
                            SpecialtyId = 2
                        },
                        new
                        {
                            DoctorId = 5,
                            SpecialtyId = 5
                        });
                });

            modelBuilder.Entity("Data.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "GP",
                            Name = "Háziorvos"
                        },
                        new
                        {
                            Id = 2,
                            Code = "INT",
                            Name = "Belgyógyász"
                        },
                        new
                        {
                            Id = 3,
                            Code = "CAR",
                            Name = "Kardiológus"
                        },
                        new
                        {
                            Id = 4,
                            Code = "SEB",
                            Name = "Sebész"
                        },
                        new
                        {
                            Id = 5,
                            Code = "DER",
                            Name = "Bőrgyógyász"
                        });
                });

            modelBuilder.Entity("Data.Models.DoctorSpecialty", b =>
                {
                    b.HasOne("Data.Models.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Specialty", null)
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
